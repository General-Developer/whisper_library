/* <!-- START LICENSE -->


This Software / Program / Source Code Created By Developer From Company GLOBAL CORPORATION
Social Media:

   - Youtube: https://youtube.com/@Global_Corporation 
   - Github: https://github.com/globalcorporation
   - TELEGRAM: https://t.me/GLOBAL_CORP_ORG_BOT

All code script in here created 100% original without copy / steal from other code if we copy we add description source at from top code

If you wan't edit you must add credit me (don't change)

If this Software / Program / Source Code has you

Jika Program ini milik anda dari hasil beli jasa developer di (Global Corporation / apapun itu dari turunan itu jika ada kesalahan / bug / ingin update segera lapor ke sub)

Misal anda beli Beli source code di Slebew CORPORATION anda lapor dahulu di slebew jangan lapor di GLOBAL CORPORATION!

Jika ada kendala program ini (Pastikan sebelum deal project tidak ada negosiasi harga)
Karena jika ada negosiasi harga kemungkinan

1. Software Ada yang di kurangin
2. Informasi tidak lengkap
3. Bantuan Tidak Bisa remote / full time (Ada jeda)

Sebelum program ini sampai ke pembeli developer kami sudah melakukan testing

jadi sebelum nego kami sudah melakukan berbagai konsekuensi jika nego tidak sesuai ? 
Bukan maksud kami menipu itu karena harga yang sudah di kalkulasi + bantuan tiba tiba di potong akhirnya bantuan / software kadang tidak lengkap


<!-- END LICENSE --> */
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// GeneralAiSpeechToTextLibraryWhisper Binding By General Corporation & Global Corporation & General Developer
class WhisperLibrarySharedBindingsByGeneralDeveloper {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WhisperLibrarySharedBindingsByGeneralDeveloper(
      ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WhisperLibrarySharedBindingsByGeneralDeveloper.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<whisper_context> whisper_init_from_file_with_params(
    ffi.Pointer<ffi.Char> path_model,
    whisper_context_params params,
  ) {
    return _whisper_init_from_file_with_params(
      path_model,
      params,
    );
  }

  late final _whisper_init_from_file_with_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Char>,
              whisper_context_params)>>('whisper_init_from_file_with_params');
  late final _whisper_init_from_file_with_params =
      _whisper_init_from_file_with_paramsPtr.asFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Char>, whisper_context_params)>();

  ffi.Pointer<whisper_context> whisper_init_from_buffer_with_params(
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
    whisper_context_params params,
  ) {
    return _whisper_init_from_buffer_with_params(
      buffer,
      buffer_size,
      params,
    );
  }

  late final _whisper_init_from_buffer_with_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              whisper_context_params)>>('whisper_init_from_buffer_with_params');
  late final _whisper_init_from_buffer_with_params =
      _whisper_init_from_buffer_with_paramsPtr.asFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Void>, int, whisper_context_params)>();

  ffi.Pointer<whisper_context> whisper_init_with_params(
    ffi.Pointer<whisper_model_loader> loader,
    whisper_context_params params,
  ) {
    return _whisper_init_with_params(
      loader,
      params,
    );
  }

  late final _whisper_init_with_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>,
              whisper_context_params)>>('whisper_init_with_params');
  late final _whisper_init_with_params =
      _whisper_init_with_paramsPtr.asFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>, whisper_context_params)>();

  ffi.Pointer<whisper_context> whisper_init_from_file_with_params_no_state(
    ffi.Pointer<ffi.Char> path_model,
    whisper_context_params params,
  ) {
    return _whisper_init_from_file_with_params_no_state(
      path_model,
      params,
    );
  }

  late final _whisper_init_from_file_with_params_no_statePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<whisper_context> Function(
                  ffi.Pointer<ffi.Char>, whisper_context_params)>>(
      'whisper_init_from_file_with_params_no_state');
  late final _whisper_init_from_file_with_params_no_state =
      _whisper_init_from_file_with_params_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Char>, whisper_context_params)>();

  ffi.Pointer<whisper_context> whisper_init_from_buffer_with_params_no_state(
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
    whisper_context_params params,
  ) {
    return _whisper_init_from_buffer_with_params_no_state(
      buffer,
      buffer_size,
      params,
    );
  }

  late final _whisper_init_from_buffer_with_params_no_statePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<whisper_context> Function(
                  ffi.Pointer<ffi.Void>, ffi.Size, whisper_context_params)>>(
      'whisper_init_from_buffer_with_params_no_state');
  late final _whisper_init_from_buffer_with_params_no_state =
      _whisper_init_from_buffer_with_params_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Void>, int, whisper_context_params)>();

  ffi.Pointer<whisper_context> whisper_init_with_params_no_state(
    ffi.Pointer<whisper_model_loader> loader,
    whisper_context_params params,
  ) {
    return _whisper_init_with_params_no_state(
      loader,
      params,
    );
  }

  late final _whisper_init_with_params_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>,
              whisper_context_params)>>('whisper_init_with_params_no_state');
  late final _whisper_init_with_params_no_state =
      _whisper_init_with_params_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>, whisper_context_params)>();

  ffi.Pointer<whisper_context> whisper_init_from_file(
    ffi.Pointer<ffi.Char> path_model,
  ) {
    return _whisper_init_from_file(
      path_model,
    );
  }

  late final _whisper_init_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Char>)>>('whisper_init_from_file');
  late final _whisper_init_from_file = _whisper_init_from_filePtr.asFunction<
      ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<whisper_context> whisper_init_from_buffer(
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
  ) {
    return _whisper_init_from_buffer(
      buffer,
      buffer_size,
    );
  }

  late final _whisper_init_from_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('whisper_init_from_buffer');
  late final _whisper_init_from_buffer =
      _whisper_init_from_bufferPtr.asFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<whisper_context> whisper_init(
    ffi.Pointer<whisper_model_loader> loader,
  ) {
    return _whisper_init(
      loader,
    );
  }

  late final _whisper_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>)>>('whisper_init');
  late final _whisper_init = _whisper_initPtr.asFunction<
      ffi.Pointer<whisper_context> Function(
          ffi.Pointer<whisper_model_loader>)>();

  ffi.Pointer<whisper_context> whisper_init_from_file_no_state(
    ffi.Pointer<ffi.Char> path_model,
  ) {
    return _whisper_init_from_file_no_state(
      path_model,
    );
  }

  late final _whisper_init_from_file_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Char>)>>('whisper_init_from_file_no_state');
  late final _whisper_init_from_file_no_state =
      _whisper_init_from_file_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<whisper_context> whisper_init_from_buffer_no_state(
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
  ) {
    return _whisper_init_from_buffer_no_state(
      buffer,
      buffer_size,
    );
  }

  late final _whisper_init_from_buffer_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>,
              ffi.Size)>>('whisper_init_from_buffer_no_state');
  late final _whisper_init_from_buffer_no_state =
      _whisper_init_from_buffer_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<whisper_context> whisper_init_no_state(
    ffi.Pointer<whisper_model_loader> loader,
  ) {
    return _whisper_init_no_state(
      loader,
    );
  }

  late final _whisper_init_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>)>>('whisper_init_no_state');
  late final _whisper_init_no_state = _whisper_init_no_statePtr.asFunction<
      ffi.Pointer<whisper_context> Function(
          ffi.Pointer<whisper_model_loader>)>();

  ffi.Pointer<whisper_state> whisper_init_state(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_init_state(
      ctx,
    );
  }

  late final _whisper_init_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_state> Function(
              ffi.Pointer<whisper_context>)>>('whisper_init_state');
  late final _whisper_init_state = _whisper_init_statePtr.asFunction<
      ffi.Pointer<whisper_state> Function(ffi.Pointer<whisper_context>)>();

  int whisper_ctx_init_openvino_encoder_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Char> model_path,
    ffi.Pointer<ffi.Char> device,
    ffi.Pointer<ffi.Char> cache_dir,
  ) {
    return _whisper_ctx_init_openvino_encoder_with_state(
      ctx,
      state,
      model_path,
      device,
      cache_dir,
    );
  }

  late final _whisper_ctx_init_openvino_encoder_with_statePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<whisper_context>,
                  ffi.Pointer<whisper_state>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>(
      'whisper_ctx_init_openvino_encoder_with_state');
  late final _whisper_ctx_init_openvino_encoder_with_state =
      _whisper_ctx_init_openvino_encoder_with_statePtr.asFunction<
          int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int whisper_ctx_init_openvino_encoder(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Char> model_path,
    ffi.Pointer<ffi.Char> device,
    ffi.Pointer<ffi.Char> cache_dir,
  ) {
    return _whisper_ctx_init_openvino_encoder(
      ctx,
      model_path,
      device,
      cache_dir,
    );
  }

  late final _whisper_ctx_init_openvino_encoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('whisper_ctx_init_openvino_encoder');
  late final _whisper_ctx_init_openvino_encoder =
      _whisper_ctx_init_openvino_encoderPtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void whisper_free(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_free(
      ctx,
    );
  }

  late final _whisper_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_context>)>>(
      'whisper_free');
  late final _whisper_free = _whisper_freePtr
      .asFunction<void Function(ffi.Pointer<whisper_context>)>();

  void whisper_free_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_free_state(
      state,
    );
  }

  late final _whisper_free_statePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_state>)>>(
      'whisper_free_state');
  late final _whisper_free_state = _whisper_free_statePtr
      .asFunction<void Function(ffi.Pointer<whisper_state>)>();

  void whisper_free_params(
    ffi.Pointer<whisper_full_params> params,
  ) {
    return _whisper_free_params(
      params,
    );
  }

  late final _whisper_free_paramsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<whisper_full_params>)>>(
      'whisper_free_params');
  late final _whisper_free_params = _whisper_free_paramsPtr
      .asFunction<void Function(ffi.Pointer<whisper_full_params>)>();

  void whisper_free_context_params(
    ffi.Pointer<whisper_context_params> params,
  ) {
    return _whisper_free_context_params(
      params,
    );
  }

  late final _whisper_free_context_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<whisper_context_params>)>>(
      'whisper_free_context_params');
  late final _whisper_free_context_params = _whisper_free_context_paramsPtr
      .asFunction<void Function(ffi.Pointer<whisper_context_params>)>();

  int whisper_pcm_to_mel(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel(
      ctx,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_melPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Int)>>('whisper_pcm_to_mel');
  late final _whisper_pcm_to_mel = _whisper_pcm_to_melPtr.asFunction<
      int Function(
          ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_pcm_to_mel_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel_with_state(
      ctx,
      state,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_mel_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_pcm_to_mel_with_state');
  late final _whisper_pcm_to_mel_with_state =
      _whisper_pcm_to_mel_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_set_mel(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Float> data,
    int n_len,
    int n_mel,
  ) {
    return _whisper_set_mel(
      ctx,
      data,
      n_len,
      n_mel,
    );
  }

  late final _whisper_set_melPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Int)>>('whisper_set_mel');
  late final _whisper_set_mel = _whisper_set_melPtr.asFunction<
      int Function(
          ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_set_mel_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Float> data,
    int n_len,
    int n_mel,
  ) {
    return _whisper_set_mel_with_state(
      ctx,
      state,
      data,
      n_len,
      n_mel,
    );
  }

  late final _whisper_set_mel_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_set_mel_with_state');
  late final _whisper_set_mel_with_state =
      _whisper_set_mel_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_encode(
    ffi.Pointer<whisper_context> ctx,
    int offset,
    int n_threads,
  ) {
    return _whisper_encode(
      ctx,
      offset,
      n_threads,
    );
  }

  late final _whisper_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_encode');
  late final _whisper_encode = _whisper_encodePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int, int)>();

  int whisper_encode_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int offset,
    int n_threads,
  ) {
    return _whisper_encode_with_state(
      ctx,
      state,
      offset,
      n_threads,
    );
  }

  late final _whisper_encode_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Int,
              ffi.Int)>>('whisper_encode_with_state');
  late final _whisper_encode_with_state =
      _whisper_encode_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              int, int)>();

  int whisper_decode(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_token> tokens,
    int n_tokens,
    int n_past,
    int n_threads,
  ) {
    return _whisper_decode(
      ctx,
      tokens,
      n_tokens,
      n_past,
      n_threads,
    );
  }

  late final _whisper_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_token>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('whisper_decode');
  late final _whisper_decode = _whisper_decodePtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_token>,
          int, int, int)>();

  int whisper_decode_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<whisper_token> tokens,
    int n_tokens,
    int n_past,
    int n_threads,
  ) {
    return _whisper_decode_with_state(
      ctx,
      state,
      tokens,
      n_tokens,
      n_past,
      n_threads,
    );
  }

  late final _whisper_decode_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<whisper_token>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('whisper_decode_with_state');
  late final _whisper_decode_with_state =
      _whisper_decode_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<whisper_token>, int, int, int)>();

  int whisper_tokenize(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<whisper_token> tokens,
    int n_max_tokens,
  ) {
    return _whisper_tokenize(
      ctx,
      text,
      tokens,
      n_max_tokens,
    );
  }

  late final _whisper_tokenizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<whisper_token>, ffi.Int)>>('whisper_tokenize');
  late final _whisper_tokenize = _whisper_tokenizePtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<whisper_token>, int)>();

  int whisper_token_count(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _whisper_token_count(
      ctx,
      text,
    );
  }

  late final _whisper_token_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>,
              ffi.Pointer<ffi.Char>)>>('whisper_token_count');
  late final _whisper_token_count = _whisper_token_countPtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Char>)>();

  int whisper_lang_max_id() {
    return _whisper_lang_max_id();
  }

  late final _whisper_lang_max_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('whisper_lang_max_id');
  late final _whisper_lang_max_id =
      _whisper_lang_max_idPtr.asFunction<int Function()>();

  int whisper_lang_id(
    ffi.Pointer<ffi.Char> lang,
  ) {
    return _whisper_lang_id(
      lang,
    );
  }

  late final _whisper_lang_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'whisper_lang_id');
  late final _whisper_lang_id =
      _whisper_lang_idPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> whisper_lang_str(
    int id,
  ) {
    return _whisper_lang_str(
      id,
    );
  }

  late final _whisper_lang_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_lang_str');
  late final _whisper_lang_str =
      _whisper_lang_strPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> whisper_lang_str_full(
    int id,
  ) {
    return _whisper_lang_str_full(
      id,
    );
  }

  late final _whisper_lang_str_fullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_lang_str_full');
  late final _whisper_lang_str_full = _whisper_lang_str_fullPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int whisper_lang_auto_detect(
    ffi.Pointer<whisper_context> ctx,
    int offset_ms,
    int n_threads,
    ffi.Pointer<ffi.Float> lang_probs,
  ) {
    return _whisper_lang_auto_detect(
      ctx,
      offset_ms,
      n_threads,
      lang_probs,
    );
  }

  late final _whisper_lang_auto_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Float>)>>('whisper_lang_auto_detect');
  late final _whisper_lang_auto_detect =
      _whisper_lang_auto_detectPtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, int, int,
              ffi.Pointer<ffi.Float>)>();

  int whisper_lang_auto_detect_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int offset_ms,
    int n_threads,
    ffi.Pointer<ffi.Float> lang_probs,
  ) {
    return _whisper_lang_auto_detect_with_state(
      ctx,
      state,
      offset_ms,
      n_threads,
      lang_probs,
    );
  }

  late final _whisper_lang_auto_detect_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>)>>('whisper_lang_auto_detect_with_state');
  late final _whisper_lang_auto_detect_with_state =
      _whisper_lang_auto_detect_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              int, int, ffi.Pointer<ffi.Float>)>();

  int whisper_n_len(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_len(
      ctx,
    );
  }

  late final _whisper_n_lenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_len');
  late final _whisper_n_len = _whisper_n_lenPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_n_len_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_n_len_from_state(
      state,
    );
  }

  late final _whisper_n_len_from_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_state>)>>(
          'whisper_n_len_from_state');
  late final _whisper_n_len_from_state = _whisper_n_len_from_statePtr
      .asFunction<int Function(ffi.Pointer<whisper_state>)>();

  int whisper_n_vocab(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_vocab(
      ctx,
    );
  }

  late final _whisper_n_vocabPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_vocab');
  late final _whisper_n_vocab = _whisper_n_vocabPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_n_text_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_text_ctx(
      ctx,
    );
  }

  late final _whisper_n_text_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_text_ctx');
  late final _whisper_n_text_ctx = _whisper_n_text_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_n_audio_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_audio_ctx(
      ctx,
    );
  }

  late final _whisper_n_audio_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_audio_ctx');
  late final _whisper_n_audio_ctx = _whisper_n_audio_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_is_multilingual(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_is_multilingual(
      ctx,
    );
  }

  late final _whisper_is_multilingualPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_is_multilingual');
  late final _whisper_is_multilingual = _whisper_is_multilingualPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_vocab(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_vocab(
      ctx,
    );
  }

  late final _whisper_model_n_vocabPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_vocab');
  late final _whisper_model_n_vocab = _whisper_model_n_vocabPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_ctx(
      ctx,
    );
  }

  late final _whisper_model_n_audio_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_ctx');
  late final _whisper_model_n_audio_ctx = _whisper_model_n_audio_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_state(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_state(
      ctx,
    );
  }

  late final _whisper_model_n_audio_statePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_state');
  late final _whisper_model_n_audio_state = _whisper_model_n_audio_statePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_head(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_head(
      ctx,
    );
  }

  late final _whisper_model_n_audio_headPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_head');
  late final _whisper_model_n_audio_head = _whisper_model_n_audio_headPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_layer(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_layer(
      ctx,
    );
  }

  late final _whisper_model_n_audio_layerPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_layer');
  late final _whisper_model_n_audio_layer = _whisper_model_n_audio_layerPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_ctx(
      ctx,
    );
  }

  late final _whisper_model_n_text_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_ctx');
  late final _whisper_model_n_text_ctx = _whisper_model_n_text_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_state(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_state(
      ctx,
    );
  }

  late final _whisper_model_n_text_statePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_state');
  late final _whisper_model_n_text_state = _whisper_model_n_text_statePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_head(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_head(
      ctx,
    );
  }

  late final _whisper_model_n_text_headPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_head');
  late final _whisper_model_n_text_head = _whisper_model_n_text_headPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_layer(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_layer(
      ctx,
    );
  }

  late final _whisper_model_n_text_layerPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_layer');
  late final _whisper_model_n_text_layer = _whisper_model_n_text_layerPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_mels(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_mels(
      ctx,
    );
  }

  late final _whisper_model_n_melsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_mels');
  late final _whisper_model_n_mels = _whisper_model_n_melsPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_ftype(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_ftype(
      ctx,
    );
  }

  late final _whisper_model_ftypePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_ftype');
  late final _whisper_model_ftype = _whisper_model_ftypePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_type(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_type(
      ctx,
    );
  }

  late final _whisper_model_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_type');
  late final _whisper_model_type = _whisper_model_typePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  ffi.Pointer<ffi.Float> whisper_get_logits(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_get_logits(
      ctx,
    );
  }

  late final _whisper_get_logitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<whisper_context>)>>('whisper_get_logits');
  late final _whisper_get_logits = _whisper_get_logitsPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(ffi.Pointer<whisper_context>)>();

  ffi.Pointer<ffi.Float> whisper_get_logits_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_get_logits_from_state(
      state,
    );
  }

  late final _whisper_get_logits_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<whisper_state>)>>('whisper_get_logits_from_state');
  late final _whisper_get_logits_from_state =
      _whisper_get_logits_from_statePtr.asFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<whisper_state>)>();

  ffi.Pointer<ffi.Char> whisper_token_to_str(
    ffi.Pointer<whisper_context> ctx,
    int token,
  ) {
    return _whisper_token_to_str(
      ctx,
      token,
    );
  }

  late final _whisper_token_to_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>,
              whisper_token)>>('whisper_token_to_str');
  late final _whisper_token_to_str = _whisper_token_to_strPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>, int)>();

  ffi.Pointer<ffi.Char> whisper_model_type_readable(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_type_readable(
      ctx,
    );
  }

  late final _whisper_model_type_readablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<whisper_context>)>>('whisper_model_type_readable');
  late final _whisper_model_type_readable =
      _whisper_model_type_readablePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_eot(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_eot(
      ctx,
    );
  }

  late final _whisper_token_eotPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_eot');
  late final _whisper_token_eot = _whisper_token_eotPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_sot(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_sot(
      ctx,
    );
  }

  late final _whisper_token_sotPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_sot');
  late final _whisper_token_sot = _whisper_token_sotPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_solm(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_solm(
      ctx,
    );
  }

  late final _whisper_token_solmPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_solm');
  late final _whisper_token_solm = _whisper_token_solmPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_prev(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_prev(
      ctx,
    );
  }

  late final _whisper_token_prevPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_prev');
  late final _whisper_token_prev = _whisper_token_prevPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_nosp(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_nosp(
      ctx,
    );
  }

  late final _whisper_token_nospPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_nosp');
  late final _whisper_token_nosp = _whisper_token_nospPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_not(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_not(
      ctx,
    );
  }

  late final _whisper_token_notPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_not');
  late final _whisper_token_not = _whisper_token_notPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_beg(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_beg(
      ctx,
    );
  }

  late final _whisper_token_begPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_beg');
  late final _whisper_token_beg = _whisper_token_begPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_lang(
    ffi.Pointer<whisper_context> ctx,
    int lang_id,
  ) {
    return _whisper_token_lang(
      ctx,
      lang_id,
    );
  }

  late final _whisper_token_langPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>, ffi.Int)>>('whisper_token_lang');
  late final _whisper_token_lang = _whisper_token_langPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_token_translate(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_translate(
      ctx,
    );
  }

  late final _whisper_token_translatePtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_translate');
  late final _whisper_token_translate = _whisper_token_translatePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_transcribe(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_transcribe(
      ctx,
    );
  }

  late final _whisper_token_transcribePtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_transcribe');
  late final _whisper_token_transcribe = _whisper_token_transcribePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  ffi.Pointer<whisper_timings> whisper_get_timings(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_get_timings(
      ctx,
    );
  }

  late final _whisper_get_timingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_timings> Function(
              ffi.Pointer<whisper_context>)>>('whisper_get_timings');
  late final _whisper_get_timings = _whisper_get_timingsPtr.asFunction<
      ffi.Pointer<whisper_timings> Function(ffi.Pointer<whisper_context>)>();

  void whisper_print_timings(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_print_timings(
      ctx,
    );
  }

  late final _whisper_print_timingsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_context>)>>(
      'whisper_print_timings');
  late final _whisper_print_timings = _whisper_print_timingsPtr
      .asFunction<void Function(ffi.Pointer<whisper_context>)>();

  void whisper_reset_timings(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_reset_timings(
      ctx,
    );
  }

  late final _whisper_reset_timingsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_context>)>>(
      'whisper_reset_timings');
  late final _whisper_reset_timings = _whisper_reset_timingsPtr
      .asFunction<void Function(ffi.Pointer<whisper_context>)>();

  ffi.Pointer<ffi.Char> whisper_print_system_info() {
    return _whisper_print_system_info();
  }

  late final _whisper_print_system_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'whisper_print_system_info');
  late final _whisper_print_system_info = _whisper_print_system_infoPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<whisper_context_params> whisper_context_default_params_by_ref() {
    return _whisper_context_default_params_by_ref();
  }

  late final _whisper_context_default_params_by_refPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<whisper_context_params> Function()>>(
      'whisper_context_default_params_by_ref');
  late final _whisper_context_default_params_by_ref =
      _whisper_context_default_params_by_refPtr
          .asFunction<ffi.Pointer<whisper_context_params> Function()>();

  whisper_context_params whisper_context_default_params() {
    return _whisper_context_default_params();
  }

  late final _whisper_context_default_paramsPtr =
      _lookup<ffi.NativeFunction<whisper_context_params Function()>>(
          'whisper_context_default_params');
  late final _whisper_context_default_params =
      _whisper_context_default_paramsPtr
          .asFunction<whisper_context_params Function()>();

  ffi.Pointer<whisper_full_params> whisper_full_default_params_by_ref(
    whisper_sampling_strategy strategy,
  ) {
    return _whisper_full_default_params_by_ref(
      strategy.value,
    );
  }

  late final _whisper_full_default_params_by_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_full_params> Function(
              ffi.UnsignedInt)>>('whisper_full_default_params_by_ref');
  late final _whisper_full_default_params_by_ref =
      _whisper_full_default_params_by_refPtr
          .asFunction<ffi.Pointer<whisper_full_params> Function(int)>();

  whisper_full_params whisper_full_default_params(
    whisper_sampling_strategy strategy,
  ) {
    return _whisper_full_default_params(
      strategy.value,
    );
  }

  late final _whisper_full_default_paramsPtr = _lookup<
          ffi.NativeFunction<whisper_full_params Function(ffi.UnsignedInt)>>(
      'whisper_full_default_params');
  late final _whisper_full_default_params = _whisper_full_default_paramsPtr
      .asFunction<whisper_full_params Function(int)>();

  int whisper_full(
    ffi.Pointer<whisper_context> ctx,
    whisper_full_params params,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
  ) {
    return _whisper_full(
      ctx,
      params,
      samples,
      n_samples,
    );
  }

  late final _whisper_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, whisper_full_params,
              ffi.Pointer<ffi.Float>, ffi.Int)>>('whisper_full');
  late final _whisper_full = _whisper_fullPtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, whisper_full_params,
          ffi.Pointer<ffi.Float>, int)>();

  int whisper_full_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    whisper_full_params params,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
  ) {
    return _whisper_full_with_state(
      ctx,
      state,
      params,
      samples,
      n_samples,
    );
  }

  late final _whisper_full_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              whisper_full_params,
              ffi.Pointer<ffi.Float>,
              ffi.Int)>>('whisper_full_with_state');
  late final _whisper_full_with_state = _whisper_full_with_statePtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
          whisper_full_params, ffi.Pointer<ffi.Float>, int)>();

  int whisper_full_parallel(
    ffi.Pointer<whisper_context> ctx,
    whisper_full_params params,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_processors,
  ) {
    return _whisper_full_parallel(
      ctx,
      params,
      samples,
      n_samples,
      n_processors,
    );
  }

  late final _whisper_full_parallelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              whisper_full_params,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_full_parallel');
  late final _whisper_full_parallel = _whisper_full_parallelPtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, whisper_full_params,
          ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_full_n_segments(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_full_n_segments(
      ctx,
    );
  }

  late final _whisper_full_n_segmentsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_full_n_segments');
  late final _whisper_full_n_segments = _whisper_full_n_segmentsPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_full_n_segments_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_full_n_segments_from_state(
      state,
    );
  }

  late final _whisper_full_n_segments_from_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_state>)>>(
          'whisper_full_n_segments_from_state');
  late final _whisper_full_n_segments_from_state =
      _whisper_full_n_segments_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>)>();

  int whisper_full_lang_id(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_full_lang_id(
      ctx,
    );
  }

  late final _whisper_full_lang_idPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_full_lang_id');
  late final _whisper_full_lang_id = _whisper_full_lang_idPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_full_lang_id_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_full_lang_id_from_state(
      state,
    );
  }

  late final _whisper_full_lang_id_from_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_state>)>>(
          'whisper_full_lang_id_from_state');
  late final _whisper_full_lang_id_from_state =
      _whisper_full_lang_id_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>)>();

  int whisper_full_get_segment_t0(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t0(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_t0');
  late final _whisper_full_get_segment_t0 = _whisper_full_get_segment_t0Ptr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_full_get_segment_t0_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t0_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t0_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_get_segment_t0_from_state');
  late final _whisper_full_get_segment_t0_from_state =
      _whisper_full_get_segment_t0_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int)>();

  int whisper_full_get_segment_t1(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t1(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_t1');
  late final _whisper_full_get_segment_t1 = _whisper_full_get_segment_t1Ptr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_full_get_segment_t1_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t1_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t1_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_get_segment_t1_from_state');
  late final _whisper_full_get_segment_t1_from_state =
      _whisper_full_get_segment_t1_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int)>();

  bool whisper_full_get_segment_speaker_turn_next(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_speaker_turn_next(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_speaker_turn_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_speaker_turn_next');
  late final _whisper_full_get_segment_speaker_turn_next =
      _whisper_full_get_segment_speaker_turn_nextPtr
          .asFunction<bool Function(ffi.Pointer<whisper_context>, int)>();

  bool whisper_full_get_segment_speaker_turn_next_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_speaker_turn_next_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_speaker_turn_next_from_statePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<whisper_state>, ffi.Int)>>(
          'whisper_full_get_segment_speaker_turn_next_from_state');
  late final _whisper_full_get_segment_speaker_turn_next_from_state =
      _whisper_full_get_segment_speaker_turn_next_from_statePtr
          .asFunction<bool Function(ffi.Pointer<whisper_state>, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_segment_text(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_text(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_text');
  late final _whisper_full_get_segment_text =
      _whisper_full_get_segment_textPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_segment_text_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_text_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_text_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_get_segment_text_from_state');
  late final _whisper_full_get_segment_text_from_state =
      _whisper_full_get_segment_text_from_statePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_state>, int)>();

  int whisper_full_n_tokens(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_n_tokens(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_n_tokensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>, ffi.Int)>>('whisper_full_n_tokens');
  late final _whisper_full_n_tokens = _whisper_full_n_tokensPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_full_n_tokens_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_n_tokens_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_n_tokens_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_n_tokens_from_state');
  late final _whisper_full_n_tokens_from_state =
      _whisper_full_n_tokens_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_token_text(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_text(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_text');
  late final _whisper_full_get_token_text =
      _whisper_full_get_token_textPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<whisper_context>, int, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_token_text_from_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_text_from_state(
      ctx,
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_text_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Int,
              ffi.Int)>>('whisper_full_get_token_text_from_state');
  late final _whisper_full_get_token_text_from_state =
      _whisper_full_get_token_text_from_statePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>, int, int)>();

  int whisper_full_get_token_id(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_id(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_idPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_id');
  late final _whisper_full_get_token_id = _whisper_full_get_token_idPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int, int)>();

  int whisper_full_get_token_id_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_id_from_state(
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_id_from_statePtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(ffi.Pointer<whisper_state>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_id_from_state');
  late final _whisper_full_get_token_id_from_state =
      _whisper_full_get_token_id_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int, int)>();

  whisper_token_data whisper_full_get_token_data(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_data(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_dataPtr = _lookup<
      ffi.NativeFunction<
          whisper_token_data Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_data');
  late final _whisper_full_get_token_data =
      _whisper_full_get_token_dataPtr.asFunction<
          whisper_token_data Function(
              ffi.Pointer<whisper_context>, int, int)>();

  whisper_token_data whisper_full_get_token_data_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_data_from_state(
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_data_from_statePtr = _lookup<
      ffi.NativeFunction<
          whisper_token_data Function(ffi.Pointer<whisper_state>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_data_from_state');
  late final _whisper_full_get_token_data_from_state =
      _whisper_full_get_token_data_from_statePtr.asFunction<
          whisper_token_data Function(ffi.Pointer<whisper_state>, int, int)>();

  double whisper_full_get_token_p(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_p(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_p');
  late final _whisper_full_get_token_p = _whisper_full_get_token_pPtr
      .asFunction<double Function(ffi.Pointer<whisper_context>, int, int)>();

  double whisper_full_get_token_p_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_p_from_state(
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_p_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<whisper_state>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_p_from_state');
  late final _whisper_full_get_token_p_from_state =
      _whisper_full_get_token_p_from_statePtr
          .asFunction<double Function(ffi.Pointer<whisper_state>, int, int)>();

  /// /////////////////////////////////////////////////////////////////////////
  int whisper_bench_memcpy(
    int n_threads,
  ) {
    return _whisper_bench_memcpy(
      n_threads,
    );
  }

  late final _whisper_bench_memcpyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'whisper_bench_memcpy');
  late final _whisper_bench_memcpy =
      _whisper_bench_memcpyPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> whisper_bench_memcpy_str(
    int n_threads,
  ) {
    return _whisper_bench_memcpy_str(
      n_threads,
    );
  }

  late final _whisper_bench_memcpy_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_bench_memcpy_str');
  late final _whisper_bench_memcpy_str = _whisper_bench_memcpy_strPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int whisper_bench_ggml_mul_mat(
    int n_threads,
  ) {
    return _whisper_bench_ggml_mul_mat(
      n_threads,
    );
  }

  late final _whisper_bench_ggml_mul_matPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'whisper_bench_ggml_mul_mat');
  late final _whisper_bench_ggml_mul_mat =
      _whisper_bench_ggml_mul_matPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> whisper_bench_ggml_mul_mat_str(
    int n_threads,
  ) {
    return _whisper_bench_ggml_mul_mat_str(
      n_threads,
    );
  }

  late final _whisper_bench_ggml_mul_mat_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_bench_ggml_mul_mat_str');
  late final _whisper_bench_ggml_mul_mat_str =
      _whisper_bench_ggml_mul_mat_strPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void whisper_log_set(
    int log_callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _whisper_log_set(
      log_callback,
      user_data,
    );
  }

  late final _whisper_log_setPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>(
      'whisper_log_set');
  late final _whisper_log_set = _whisper_log_setPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  double whisper_full_get_segment_no_speech_prob(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_no_speech_prob(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_no_speech_probPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_no_speech_prob');
  late final _whisper_full_get_segment_no_speech_prob =
      _whisper_full_get_segment_no_speech_probPtr
          .asFunction<double Function(ffi.Pointer<whisper_context>, int)>();

  double whisper_full_get_segment_no_speech_prob_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_no_speech_prob_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_no_speech_prob_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_get_segment_no_speech_prob_from_state');
  late final _whisper_full_get_segment_no_speech_prob_from_state =
      _whisper_full_get_segment_no_speech_prob_from_statePtr
          .asFunction<double Function(ffi.Pointer<whisper_state>, int)>();
}

final class max_align_t extends ffi.Opaque {}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class whisper_context extends ffi.Opaque {}

final class whisper_state extends ffi.Opaque {}

final class whisper_full_params extends ffi.Struct {
  @ffi.UnsignedInt()
  external int strategyAsInt;

  whisper_sampling_strategy get strategy =>
      whisper_sampling_strategy.fromValue(strategyAsInt);

  @ffi.Int()
  external int n_threads;

  @ffi.Int()
  external int n_max_text_ctx;

  @ffi.Int()
  external int offset_ms;

  @ffi.Int()
  external int duration_ms;

  @ffi.Bool()
  external bool translate;

  @ffi.Bool()
  external bool no_context;

  @ffi.Bool()
  external bool no_timestamps;

  @ffi.Bool()
  external bool single_segment;

  @ffi.Bool()
  external bool print_special;

  @ffi.Bool()
  external bool print_progress;

  @ffi.Bool()
  external bool print_realtime;

  @ffi.Bool()
  external bool print_timestamps;

  @ffi.Bool()
  external bool token_timestamps;

  @ffi.Float()
  external double thold_pt;

  @ffi.Float()
  external double thold_ptsum;

  @ffi.Int()
  external int max_len;

  @ffi.Bool()
  external bool split_on_word;

  @ffi.Int()
  external int max_tokens;

  @ffi.Bool()
  external bool debug_mode;

  @ffi.Int()
  external int audio_ctx;

  @ffi.Bool()
  external bool tdrz_enable;

  external ffi.Pointer<ffi.Char> suppress_regex;

  external ffi.Pointer<ffi.Char> initial_prompt;

  external ffi.Pointer<whisper_token> prompt_tokens;

  @ffi.Int()
  external int prompt_n_tokens;

  external ffi.Pointer<ffi.Char> language;

  @ffi.Bool()
  external bool detect_language;

  @ffi.Bool()
  external bool suppress_blank;

  @ffi.Bool()
  external bool suppress_nst;

  @ffi.Float()
  external double temperature;

  @ffi.Float()
  external double max_initial_ts;

  @ffi.Float()
  external double length_penalty;

  @ffi.Float()
  external double temperature_inc;

  @ffi.Float()
  external double entropy_thold;

  @ffi.Float()
  external double logprob_thold;

  @ffi.Float()
  external double no_speech_thold;

  external UnnamedStruct1 greedy;

  external UnnamedStruct2 beam_search;

  external whisper_new_segment_callback new_segment_callback;

  external ffi.Pointer<ffi.Void> new_segment_callback_user_data;

  external whisper_progress_callback progress_callback;

  external ffi.Pointer<ffi.Void> progress_callback_user_data;

  external whisper_encoder_begin_callback encoder_begin_callback;

  external ffi.Pointer<ffi.Void> encoder_begin_callback_user_data;

  @ffi.Int()
  external int abort_callback;

  external ffi.Pointer<ffi.Void> abort_callback_user_data;

  external whisper_logits_filter_callback logits_filter_callback;

  external ffi.Pointer<ffi.Void> logits_filter_callback_user_data;

  external ffi.Pointer<ffi.Pointer<whisper_grammar_element>> grammar_rules;

  @ffi.Size()
  external int n_grammar_rules;

  @ffi.Size()
  external int i_start_rule;

  @ffi.Float()
  external double grammar_penalty;
}

/// /////////////////////////////////////////////////////////////////////////
enum whisper_sampling_strategy {
  WHISPER_SAMPLING_GREEDY(0),
  WHISPER_SAMPLING_BEAM_SEARCH(1);

  final int value;
  const whisper_sampling_strategy(this.value);

  static whisper_sampling_strategy fromValue(int value) => switch (value) {
        0 => WHISPER_SAMPLING_GREEDY,
        1 => WHISPER_SAMPLING_BEAM_SEARCH,
        _ => throw ArgumentError(
            "Unknown value for whisper_sampling_strategy: $value"),
      };
}

typedef whisper_token = ffi.Int32;
typedef Dartwhisper_token = int;

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.Int()
  external int best_of;
}

final class UnnamedStruct2 extends ffi.Struct {
  @ffi.Int()
  external int beam_size;

  @ffi.Float()
  external double patience;
}

typedef whisper_new_segment_callback
    = ffi.Pointer<ffi.NativeFunction<whisper_new_segment_callbackFunction>>;
typedef whisper_new_segment_callbackFunction = ffi.Void Function(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Int n_new,
    ffi.Pointer<ffi.Void> user_data);
typedef Dartwhisper_new_segment_callbackFunction = void Function(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int n_new,
    ffi.Pointer<ffi.Void> user_data);
typedef whisper_progress_callback
    = ffi.Pointer<ffi.NativeFunction<whisper_progress_callbackFunction>>;
typedef whisper_progress_callbackFunction = ffi.Void Function(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Int progress,
    ffi.Pointer<ffi.Void> user_data);
typedef Dartwhisper_progress_callbackFunction = void Function(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int progress,
    ffi.Pointer<ffi.Void> user_data);
typedef whisper_encoder_begin_callback
    = ffi.Pointer<ffi.NativeFunction<whisper_encoder_begin_callbackFunction>>;
typedef whisper_encoder_begin_callbackFunction = ffi.Bool Function(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Void> user_data);
typedef Dartwhisper_encoder_begin_callbackFunction = bool Function(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Void> user_data);
typedef whisper_logits_filter_callback
    = ffi.Pointer<ffi.NativeFunction<whisper_logits_filter_callbackFunction>>;
typedef whisper_logits_filter_callbackFunction = ffi.Void Function(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<whisper_token_data> tokens,
    ffi.Int n_tokens,
    ffi.Pointer<ffi.Float> logits,
    ffi.Pointer<ffi.Void> user_data);
typedef Dartwhisper_logits_filter_callbackFunction = void Function(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<whisper_token_data> tokens,
    int n_tokens,
    ffi.Pointer<ffi.Float> logits,
    ffi.Pointer<ffi.Void> user_data);

final class whisper_token_data extends ffi.Struct {
  @whisper_token()
  external int id;

  @whisper_token()
  external int tid;

  @ffi.Float()
  external double p;

  @ffi.Float()
  external double plog;

  @ffi.Float()
  external double pt;

  @ffi.Float()
  external double ptsum;

  @ffi.Int64()
  external int t0;

  @ffi.Int64()
  external int t1;

  @ffi.Int64()
  external int t_dtw;

  @ffi.Float()
  external double vlen;
}

final class whisper_grammar_element extends ffi.Struct {
  @ffi.UnsignedInt()
  external int typeAsInt;

  whisper_gretype get type => whisper_gretype.fromValue(typeAsInt);

  @ffi.Uint32()
  external int value;
}

enum whisper_gretype {
  WHISPER_GRETYPE_END(0),
  WHISPER_GRETYPE_ALT(1),
  WHISPER_GRETYPE_RULE_REF(2),
  WHISPER_GRETYPE_CHAR(3),
  WHISPER_GRETYPE_CHAR_NOT(4),
  WHISPER_GRETYPE_CHAR_RNG_UPPER(5),
  WHISPER_GRETYPE_CHAR_ALT(6);

  final int value;
  const whisper_gretype(this.value);

  static whisper_gretype fromValue(int value) => switch (value) {
        0 => WHISPER_GRETYPE_END,
        1 => WHISPER_GRETYPE_ALT,
        2 => WHISPER_GRETYPE_RULE_REF,
        3 => WHISPER_GRETYPE_CHAR,
        4 => WHISPER_GRETYPE_CHAR_NOT,
        5 => WHISPER_GRETYPE_CHAR_RNG_UPPER,
        6 => WHISPER_GRETYPE_CHAR_ALT,
        _ => throw ArgumentError("Unknown value for whisper_gretype: $value"),
      };
}

enum whisper_alignment_heads_preset {
  WHISPER_AHEADS_NONE(0),
  WHISPER_AHEADS_N_TOP_MOST(1),
  WHISPER_AHEADS_CUSTOM(2),
  WHISPER_AHEADS_TINY_EN(3),
  WHISPER_AHEADS_TINY(4),
  WHISPER_AHEADS_BASE_EN(5),
  WHISPER_AHEADS_BASE(6),
  WHISPER_AHEADS_SMALL_EN(7),
  WHISPER_AHEADS_SMALL(8),
  WHISPER_AHEADS_MEDIUM_EN(9),
  WHISPER_AHEADS_MEDIUM(10),
  WHISPER_AHEADS_LARGE_V1(11),
  WHISPER_AHEADS_LARGE_V2(12),
  WHISPER_AHEADS_LARGE_V3(13),
  WHISPER_AHEADS_LARGE_V3_TURBO(14);

  final int value;
  const whisper_alignment_heads_preset(this.value);

  static whisper_alignment_heads_preset fromValue(int value) => switch (value) {
        0 => WHISPER_AHEADS_NONE,
        1 => WHISPER_AHEADS_N_TOP_MOST,
        2 => WHISPER_AHEADS_CUSTOM,
        3 => WHISPER_AHEADS_TINY_EN,
        4 => WHISPER_AHEADS_TINY,
        5 => WHISPER_AHEADS_BASE_EN,
        6 => WHISPER_AHEADS_BASE,
        7 => WHISPER_AHEADS_SMALL_EN,
        8 => WHISPER_AHEADS_SMALL,
        9 => WHISPER_AHEADS_MEDIUM_EN,
        10 => WHISPER_AHEADS_MEDIUM,
        11 => WHISPER_AHEADS_LARGE_V1,
        12 => WHISPER_AHEADS_LARGE_V2,
        13 => WHISPER_AHEADS_LARGE_V3,
        14 => WHISPER_AHEADS_LARGE_V3_TURBO,
        _ => throw ArgumentError(
            "Unknown value for whisper_alignment_heads_preset: $value"),
      };
}

final class whisper_ahead extends ffi.Struct {
  @ffi.Int()
  external int n_text_layer;

  @ffi.Int()
  external int n_head;
}

final class whisper_aheads extends ffi.Struct {
  @ffi.Size()
  external int n_heads;

  external ffi.Pointer<whisper_ahead> heads;
}

final class whisper_context_params extends ffi.Struct {
  @ffi.Bool()
  external bool use_gpu;

  @ffi.Bool()
  external bool flash_attn;

  @ffi.Int()
  external int gpu_device;

  @ffi.Bool()
  external bool dtw_token_timestamps;

  @ffi.UnsignedInt()
  external int dtw_aheads_presetAsInt;

  whisper_alignment_heads_preset get dtw_aheads_preset =>
      whisper_alignment_heads_preset.fromValue(dtw_aheads_presetAsInt);

  @ffi.Int()
  external int dtw_n_top;

  external whisper_aheads dtw_aheads;

  @ffi.Size()
  external int dtw_mem_size;
}

final class whisper_model_loader extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void> ctx,
              ffi.Pointer<ffi.Void> output, ffi.Size read_size)>> read;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> ctx)>>
      eof;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ctx)>>
      close;
}

final class whisper_timings extends ffi.Struct {
  @ffi.Float()
  external double sample_ms;

  @ffi.Float()
  external double encode_ms;

  @ffi.Float()
  external double decode_ms;

  @ffi.Float()
  external double batchd_ms;

  @ffi.Float()
  external double prompt_ms;
}

const int NULL = 0;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC23 = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_TIME_BITS64 = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C23_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 40;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C23 = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_STDINT_LEAST_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int WHISPER_SAMPLE_RATE = 16000;

const int WHISPER_N_FFT = 400;

const int WHISPER_HOP_LENGTH = 160;

const int WHISPER_CHUNK_SIZE = 30;
